//    A little hint of how I've accomplished different outputs using interpunctional characters.
//    Yes, I am aware of the fact that some of these outputs can be produced with lesser amount of
//    characters, but that's not my goal.
//
//    'undefined'         => ({}[(+[])]+'')
//    'NaN'               => ((+!![])-(''+{})+'')
//    'true'              => (!!(+!![])+'')
//    'false'             => (!(+!![])+'')
//    'function'          => (typeof(()=>{}))
//    '[object Object]'   => ({}+'')
//    'number'            => (typeof(+[]))
//    'string'            => (typeof'')
//    'Infinity'          => (((+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![]))**((+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![]))+'')
//    0                   => (+[])
//    1                   => (+!![])
//    2                   => (+!![])<<(+!![])
//    4                   => (+!![])<<(+!![])<<(+!![])
//    8                   => (+!![])<<(+!![])<<(+!![])<<(+!![])

const retardedDictionary = {
  'a': "((+!![])-(''+{})+'')[(+!![])]",
  'b': "({}+'')[(+!![])+(+!![])]",
  'c': "({}+'')[((+!![])+(+!![]))+(+!![])+((+!![])+(+!![]))]",
  'd': "({}[(+[])]+'')[(+!![])+(+!![])]",
  'e': "(!!(+!![])+'')[(+!![])+(+!![])+(+!![])]",
  'f': "(!(+!![])+'')[(+[])]",
  'g': "(typeof'')[((+!![])<<(+!![])<<(+!![]))+(+!![])]",
  // 'h': "",
  'i': "({}[(+[])]+'')[(+!![])+(+!![])+(+!![])+(+!![])+(+!![])]",
  'j': "({}+'')[(+!![])+(+!![])+(+!![])]",
  // 'k': "",
  'l': "(!(+!![])+'')[(+!![])+(+!![])]",
  'm': "(typeof(+[]))[(+!![])<<(+!![])]",
  'n': "(typeof(()=>{}))[(+!![])+(+!![])]",
  'o': "({}+'')[(+!![])]",
  // 'p': "",
  // 'q': "",
  'r': "(!!(+!![])+'')[(+!![])]",
  's': "(typeof'')[+[]]",
  't': "(!!(+!![])+'')[(+[])]",
  'u': "({}[(+[])]+'')[(+[])]",
  // 'v': "",
  // 'w': "",
  // 'x': "",
  'y': "(((+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![]))**((+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![]))+'')[((+!![])<<(+!![])<<(+!![])<<(+!![]))-(+!![])]",
  // 'z': "",

  // Special characters
  '.': "((+!![])/((+!![])<<(+!![]))+'')[(+!![])]",
  ',': "([+[],+[]]+'')[+!![]]",
  ' ': "({}+'')[((+!![])<<(+!![])<<(+!![])<<(+!![]))-(+!![])]",
  '-': "(-+!![]+'')[+[]]",
  '\'': "\'\\'\'",
  '\"': "\'\\\"\'",
  '\n': "\'\\n\'",
  '[': "({}+'')[(+[])]",
  ']': "({}+'')[((+!![])<<(+!![])<<(+!![])<<(+!![])<<(+!![]))-((+!![])+(+!![]))]",
  '(': "((()=>{})+'')[+[]]",
  ')': "((()=>{})+'')[+!![]]",
  '=': "((()=>{})+'')[(+!![])<<(+!![])]",
  '>': "((()=>{})+'')[((+!![])<<(+!![]))+!![]]",
  '{': "((()=>{})+'')[(+!![])<<(+!![])<<(+!![])]",
  '}': "((()=>{})+'')[((+!![])<<(+!![])<<(+!![]))+!![]]",
  '0': "(+[]+'')",
  '1': "(+!![]+'')",
  '2': "(((+!![])<<(+!![]))+'')",
  '3': "(((+!![])<<(+!![]))+!![]+'')",
  '4': "(((+!![])<<(+!![])<<(+!![]))+'')",
  '5': "(((+!![])<<(+!![])<<(+!![]))+!![]+'')",
  '6': "(((+!![])<<(+!![])<<(+!![]))+!![]+!![]+'')",
  '7': "(((+!![])<<(+!![])<<(+!![])<<(+!![]))-!![]+'')",
  '8': "(((+!![])<<(+!![])<<(+!![])<<(+!![]))+'')",
  '9': "(((+!![])<<(+!![])<<(+!![])<<(+!![]))+!![]+'')",
}

function strRetardify(str) {
  str = str.toLowerCase()
  return [...str].map(c => retardedDictionary[c] || `'${c}'`).join('+')
}

let str = "hello world"
let rtrdd = strRetardify(str)

console.log(rtrdd) // true